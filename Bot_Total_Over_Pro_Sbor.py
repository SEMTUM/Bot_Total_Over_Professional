import json
import requests
from datetime import datetime, timedelta
import telebot
import time
from threading import Thread
import logging
from logging.handlers import RotatingFileHandler
import math
import statistics
from collections import Counter
import pandas as pd
import os

# ==============================================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# ==============================================
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ (—Ä–æ—Ç–∞—Ü–∏—è –ø–æ 5 –ú–ë)
    file_handler = RotatingFileHandler(
        'bot.log', 
        maxBytes=5*1024*1024, 
        backupCount=3,
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.handlers = [file_handler, console_handler]
    
    # –û—Ç–∫–ª—é—á–∞–µ–º DEBUG –ª–æ–≥–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    logging.getLogger('telebot').setLevel(logging.WARNING)
    logging.getLogger('requests').setLevel(logging.WARNING)
    logging.getLogger('urllib3').setLevel(logging.WARNING)

setup_logging()
logger = logging.getLogger(__name__)

# ==============================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø BOT TOTAL OVER PRO SBOR
# ==============================================
headers = {"x-fsign": "SW9D1eZo"}  # –ö–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Flashscore

# –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
MIN_AVG_PROBABILITY = 0.01      # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
MIN_BOOKMAKER_ODDS = 1.70       # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±—É–∫–º–µ–∫–µ—Ä–∞
MAX_BOOKMAKER_ODDS = 100.00       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±—É–∫–º–µ–∫–µ—Ä–∞
MIN_OUR_ODDS = 1.00             # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞—à –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
MAX_OUR_ODDS = 100.00           # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–∞—à –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
STAT_DB = True                  # –í–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

# –í–ö–õ–Æ–ß–ï–ù–ò–ï/–û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –ú–ï–¢–û–î–û–í –†–ê–°–ß–ï–¢–ê
ENABLED_METHODS = {
    'poisson': (True, 10),              # ü•á –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ü—É–∞—Å–æ–Ω –ó–û–õ–û–¢–û–ô –°–¢–ê–ù–î–ê–†–¢ - –æ—Å–Ω–æ–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    'weighted_poisson': (True, 10),     # ü•á –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –ü—É–∞—Å—Å–æ–Ω –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —É—á–∏—Ç—ã–≤–∞–µ—Ç –¥/–≥
    'attacking_potential': (True, 10),  # ü•á –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ê—Ç–∞–∫—É—é—â–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ö–ª—é—á–µ–≤–æ–π - –±–∞–ª–∞–Ω—Å –∞—Ç–∞–∫–∏/–∑–∞—â–∏—Ç—ã
    'bayesian': (True, 10),             # ü•á –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ë–∞–π–µ—Å–æ–≤—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π - –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    'historical_totals': (True, 10),    # ü•à –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç–æ—Ç–∞–ª—ã –•–æ—Ä–æ—à–∏–π –±–∞–∑–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ—Ç–∞–ª–æ–≤
    'recent_form': (True, 5),           # ü•à –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –§–æ—Ä–º–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π –í–∞–∂–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º—ã –∫–æ–º–∞–Ω–¥
    'ml_approach': (True, 10)           # ü•à –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ML –ø–æ–¥—Ö–æ–¥ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π ML –¥–∞–µ—Ç –Ω–µ–ø–ª–æ—Ö–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
}

# –¢–ï–õ–ï–ì–†–ê–ú –¢–û–ö–ï–ù –ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†
TEL_TOKEN = "8256717454:AAG-mw9JyOqMbX-tNzZ-GriaDMlxn5Zyof8"  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
ID_ADMIN = "627946014"  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)

# –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–í–¢–û–†–ù–´–• –ü–û–ü–´–¢–û–ö –ò –õ–ò–ú–ò–¢–û–í
MAX_RETRY_ATTEMPTS = 30                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
RETRY_DELAY = 60                           # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
API_RETRY_DELAY = 60                       # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö API
POLLING_TIMEOUT = 90                       # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è polling
CLEANUP_DAYS = 2                           # –£–¥–∞–ª—è–µ–º –º–∞—Ç—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ 2 –¥–Ω—è
TELEGRAM_RATE_LIMIT_DELAY = 2              # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ Telegram
MAX_MESSAGES_PER_MINUTE = 20               # –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É

# ==============================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ==============================================
sent_matches = []  # –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö
active_chats = {}  # –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ {chat_id: last_activity}
admin_chat_id = int(ID_ADMIN) if ID_ADMIN else None  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)
message_ids = {}  # –•—Ä–∞–Ω–∏—Ç ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞ {match_key: {chat_id: message_id}}

# ==============================================
# –ö–õ–ê–°–° –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –õ–ò–ú–ò–¢–ê–ú–ò TELEGRAM
# ==============================================
class TelegramRateLimiter:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self):
        self.last_sent_time = 0
        self.message_count = 0
        self.minute_start = time.time()
    
    def wait_if_needed(self):
        """–û–∂–∏–¥–∞–µ—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"""
        current_time = time.time()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        if current_time - self.minute_start >= 60:
            self.message_count = 0
            self.minute_start = current_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
        if self.message_count >= MAX_MESSAGES_PER_MINUTE:
            sleep_time = 60 - (current_time - self.minute_start)
            if sleep_time > 0:
                logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –û–∂–∏–¥–∞–Ω–∏–µ {sleep_time:.1f} —Å–µ–∫—É–Ω–¥")
                time.sleep(sleep_time)
                self.message_count = 0
                self.minute_start = time.time()
        
        # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        time_since_last = current_time - self.last_sent_time
        if time_since_last < TELEGRAM_RATE_LIMIT_DELAY:
            time.sleep(TELEGRAM_RATE_LIMIT_DELAY - time_since_last)
        
        self.last_sent_time = time.time()
        self.message_count += 1

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏
rate_limiter = TelegramRateLimiter()

# ==============================================
# –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
# ==============================================
class StatisticsDB:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    DB_FILENAME = "bot_statistics.xlsx"
    
    @staticmethod
    def initialize_database():
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        if not STAT_DB:
            return
        
        try:
            if not os.path.exists(StatisticsDB.DB_FILENAME):
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
                df = pd.DataFrame(columns=[
                    '–î–∞—Ç–∞',
                    '–ú–∞—Ç—á', 
                    'poisson',
                    'weighted_poisson',
                    'attacking_potential',
                    'bayesian',
                    'historical_totals',
                    'recent_form',
                    'ml_approach',
                    '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å',
                    '–ù–∞—à –ö—ç—Ñ',
                    '–ö—ç—Ñ –ë–ö',
                    '–°—á–µ—Ç',
                    '–ó–∞—à–ª–∞/–ù–µ –∑–∞—à–ª–∞'
                ])
                df.to_excel(StatisticsDB.DB_FILENAME, index=False)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {StatisticsDB.DB_FILENAME}")
            else:
                logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {StatisticsDB.DB_FILENAME}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    @staticmethod
    def add_completed_match_to_db(match_data):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –º–∞—Ç—á–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if not STAT_DB:
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not match_data.get('result') or match_data.get('status') != 'finished':
                logger.debug(f"–ú–∞—Ç—á –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É: {match_data.get('teams')}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(StatisticsDB.DB_FILENAME):
                StatisticsDB.initialize_database()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            df = pd.read_excel(StatisticsDB.DB_FILENAME)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞ –≤ –±–∞–∑–µ
            existing_match = df[(df['–î–∞—Ç–∞'] == match_data['date_str']) & 
                               (df['–ú–∞—Ç—á'] == match_data['teams'])]
            
            if not existing_match.empty:
                logger.debug(f"–ú–∞—Ç—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {match_data['teams']}")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–≤–∫–∏
            if match_data['result'] and ':' in match_data['result']:
                home_score, away_score = map(int, match_data['result'].split(':'))
                total_goals = home_score + away_score
                bet_result = "–ó–∞—à–ª–∞" if total_goals >= 3 else "–ù–µ –∑–∞—à–ª–∞"
            else:
                bet_result = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Ç–æ–¥–∞–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞
            method_probabilities = {}
            for method_name in ['poisson', 'weighted_poisson', 'attacking_potential', 'bayesian', 'historical_totals', 'recent_form', 'ml_approach']:
                method_prob = match_data.get(f'{method_name}_prob')
                if method_prob is not None:
                    method_probabilities[method_name] = method_prob
                else:
                    method_probabilities[method_name] = 0
                    logger.warning(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –º–µ—Ç–æ–¥–∞ {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            db_match_data = {
                '–î–∞—Ç–∞': match_data['date_str'],
                '–ú–∞—Ç—á': match_data['teams'],
                'poisson': method_probabilities['poisson'],
                'weighted_poisson': method_probabilities['weighted_poisson'],
                'attacking_potential': method_probabilities['attacking_potential'],
                'bayesian': method_probabilities['bayesian'],
                'historical_totals': method_probabilities['historical_totals'],
                'recent_form': method_probabilities['recent_form'],
                'ml_approach': method_probabilities['ml_approach'],
                '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': match_data['avg_probability'],
                '–ù–∞—à –ö—ç—Ñ': match_data['our_expected_odds'],
                '–ö—ç—Ñ –ë–ö': match_data['odds'],
                '–°—á–µ—Ç': match_data['result'],
                '–ó–∞—à–ª–∞/–ù–µ –∑–∞—à–ª–∞': bet_result
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            new_row = pd.DataFrame([db_match_data])
            df = pd.concat([df, new_row], ignore_index=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
            df.to_excel(StatisticsDB.DB_FILENAME, index=False)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –º–∞—Ç—á –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {match_data['teams']} - {match_data['result']}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# ==============================================
# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° API FLASHSCORE –° –ü–û–í–¢–û–†–ù–´–ú–ò –ü–û–ü–´–¢–ö–ê–ú–ò
# ==============================================
class FlashscoreAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Flashscore —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    
    @staticmethod
    def make_request_with_retry(url, timeout=15):  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–µ—Ç–∏"""
        for attempt in range(MAX_RETRY_ATTEMPTS):
            try:
                response = requests.get(url=url, headers=headers, timeout=timeout)
                response.raise_for_status()
                return response
            except requests.exceptions.Timeout:
                logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRY_ATTEMPTS} –¥–ª—è {url}")
            except requests.exceptions.SSLError as e:
                logger.warning(f"SSL –æ—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRY_ATTEMPTS} –¥–ª—è {url}: {str(e)}")
            except requests.exceptions.ConnectionError as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRY_ATTEMPTS} –¥–ª—è {url}: {str(e)}")
            except requests.exceptions.RequestException as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRY_ATTEMPTS} –¥–ª—è {url}: {str(e)}")
            
            if attempt < MAX_RETRY_ATTEMPTS - 1:
                sleep_time = RETRY_DELAY * (attempt + 1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {sleep_time} —Å–µ–∫—É–Ω–¥...")
                time.sleep(sleep_time)
            else:
                logger.error(f"–í—Å–µ {MAX_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ —É–¥–∞–ª–∏—Å—å –¥–ª—è {url}")
                return None
        return None

    @staticmethod
    def get_matches(day):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            feed = f'f_1_{day}_3_ru_5'
            url = f'https://d.flashscorekz.com/x/feed/{feed}'
            
            response = FlashscoreAPI.make_request_with_retry(url)
            if response is None:
                return []
                
            data = response.text.split('¬¨')
            data_list = [{}]
            list_match = []

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            for item in data:
                if '√∑' not in item:
                    continue
                key = item.split('√∑')[0]
                value = item.split('√∑')[-1]

                if '~' in key:
                    data_list.append({key: value})
                else:
                    data_list[-1].update({key: value})

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π
            league = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            for game in data_list:
                if not game:
                    continue
                    
                if 'ZA' in list(game.keys())[0]:
                    league = game.get("~ZA")
                if 'AA' in list(game.keys())[0]:
                    date = datetime.fromtimestamp(int(game.get("AD")))
                    team_1 = game.get("AE")
                    team_2 = game.get("AF")
                    id_match = game.get("~AA")
                    list_match.append([id_match, team_1, team_2, date, league])
            
            return list_match
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π: {str(e)}")
        return []

    @staticmethod
    def get_total_goals(match_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ–ª–∞–º –¥–ª—è –º–∞—Ç—á–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            url = f'https://46.flashscore.ninja/46/x/feed/df_hh_1_{match_id}'
            
            response = FlashscoreAPI.make_request_with_retry(url)
            if response is None:
                return None
                
            data = response.text.split('¬¨')
            data_list = [{}]
            list_match = []

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            for item in data:
                if '√∑' not in item:
                    continue
                    
                key = item.split('√∑')[0]
                value = item.split('√∑')[-1]

                if '~' in key:
                    data_list.append({key: value})
                else:
                    data_list[-1].update({key: value})

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            for item in data_list:
                if not item:
                    continue
                    
                if '~KB' in item.keys():
                    list_match.append([item.get('~KB')])
                    list_match[-1].append([])
                if 'KJ' in item.keys():
                    list_match[-1][-1].append(item.get('KJ'))
                if 'KK' in item.keys():
                    list_match[-1][-1].append(item.get('KK'))
                if 'KU' in item.keys() and item.get('KU') != '':
                    list_match[-1][-1].append(int(item.get('KU')))
                if 'KT' in item.keys() and item.get('KT') != '':
                    list_match[-1][-1].append(int(item.get('KT')))
                if 'KS' in item.keys():
                    list_match[-1][-1].append(item.get('KS'))
                    list_match[-1].append([])
            
            return list_match
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –º–∞—Ç—á–∞ {match_id}: {str(e)}")
        return None

    @staticmethod
    def get_odds(match_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –º–∞—Ç—á —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            url = f'https://global.ds.lsapp.eu/odds/pq_graphql?_hash=oce&eventId={match_id}&projectId=46&geoIpCode=RU&geoIpSubdivisionCode=RU'
            
            response = FlashscoreAPI.make_request_with_retry(url)
            if response is None:
                return None
                
            data = json.loads(response.text)['data']['findOddsByEventId']['odds']
            
            for item in data:
                if item['bettingType'] == 'OVER_UNDER' and item['bettingScope'] == 'FULL_TIME':
                    odds = item['odds']
                    for elem in odds:
                        if float(elem['handicap']['value']) == 2.5 and elem['selection'] == 'OVER': 
                            return elem['value']
            return None
            
        except (KeyError, json.JSONDecodeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∞—Ç—á–∞ {match_id}: {str(e)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∞—Ç—á–∞ {match_id}: {str(e)}")
        return None

    @staticmethod
    def get_match_result(match_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            url = f'https://46.flashscore.ninja/46/x/feed/dc_1_{match_id}'
            
            response = FlashscoreAPI.make_request_with_retry(url)
            if response is None:
                return None, None, None, None
                
            data = response.text.split('¬¨')
            
            score = None
            score_1, score_2 = None, None
            status = None
            home_score = None
            away_score = None
            
            for item in data:
                if '√∑' not in item:
                    continue
                    
                if 'DG√∑' in item:  # –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç
                    score_1 = item.split('√∑')[1]
                if 'DH√∑' in item:
                    score_2 = item.split('√∑')[1]
                if 'DA√∑3' in item:
                    status = 'finished'
                elif 'DA√∑1' in item:
                    status = '1st half'
                elif 'DA√∑2' in item:
                    status = '2nd half'
                elif 'DA√∑4' in item:
                    status = 'halftime'
                elif 'DA√∑0' in item:
                    status = 'upcoming'
                    
            if score_1 is not None and score_2 is not None:
                score = f"{score_1}:{score_2}"
                home_score, away_score = int(score_1), int(score_2)
            
            return score, status, home_score, away_score
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ {match_id}: {str(e)}")
            return None, None, None, None

# ==============================================
# –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –†–ê–°–ß–ï–¢–ê –í–ï–†–û–Ø–¢–ù–û–°–¢–ï–ô
# ==============================================
class ProbabilityCalculator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
    
    @staticmethod
    def calculate_poisson_probability(lambda_param, k):
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ü—É–∞—Å—Å–æ–Ω–∞"""
        try:
            return (math.exp(-lambda_param) * (lambda_param ** k)) / math.factorial(k)
        except:
            return 0

    @staticmethod
    def advanced_probability_analysis(team1_data, team2_data):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π"""
        
        def poisson_method():
            """–ú–µ—Ç–æ–¥ 1: –ü—É–∞—Å—Å–æ–Ω–æ–≤—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"""
            enabled, min_matches = ENABLED_METHODS['poisson']
            if not enabled:
                return 0, "–ü—É–∞—Å—Å–æ–Ω"
            if team1_data['matches_processed'] < min_matches or team2_data['matches_processed'] < min_matches:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –º–µ—Ç–æ–¥–∞ –ü—É–∞—Å—Å–æ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç—á–µ–π ({team1_data['matches_processed']}/{team2_data['matches_processed']} < {min_matches})")
                return 0, "–ü—É–∞—Å—Å–æ–Ω"
                
            lambda1 = team1_data['total_goals_scored'] / team1_data['matches_processed']
            lambda2 = team2_data['total_goals_scored'] / team2_data['matches_processed']
            total_lambda = (lambda1 + lambda2) / 2
            
            prob_over_25 = sum(ProbabilityCalculator.calculate_poisson_probability(total_lambda * 2.5, k) 
                             for k in range(3, 15))
            return min(prob_over_25, 0.95), "–ü—É–∞—Å—Å–æ–Ω"

        def weighted_poisson():
            """–ú–µ—Ç–æ–¥ 2: –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –ü—É–∞—Å—Å–æ–Ω"""
            enabled, min_matches = ENABLED_METHODS['weighted_poisson']
            if not enabled:
                return 0, "–í–∑–≤–µ—à.–ü—É–∞—Å—Å–æ–Ω"
            if team1_data['matches_processed'] < min_matches or team2_data['matches_processed'] < min_matches:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –º–µ—Ç–æ–¥–∞ –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –ü—É–∞—Å—Å–æ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç—á–µ–π ({team1_data['matches_processed']}/{team2_data['matches_processed']} < {min_matches})")
                return 0, "–í–∑–≤–µ—à.–ü—É–∞—Å—Å–æ–Ω"
                
            home_weight = 1.2
            away_weight = 0.8
            
            lambda1_home = sum(m['goals_scored'] for m in team1_data['matches_details'] if m['type'] == '–¥–æ–º–∞') / max(team1_data['home_matches'], 1)
            lambda1_away = sum(m['goals_scored'] for m in team1_data['matches_details'] if m['type'] == '–≤ –≥–æ—Å—Ç—è—Ö') / max(team1_data['away_matches'], 1)
            lambda2_home = sum(m['goals_scored'] for m in team2_data['matches_details'] if m['type'] == '–¥–æ–º–∞') / max(team2_data['home_matches'], 1)
            lambda2_away = sum(m['goals_scored'] for m in team2_data['matches_details'] if m['type'] == '–≤ –≥–æ—Å—Ç—è—Ö') / max(team2_data['away_matches'], 1)
            
            weighted_lambda = (lambda1_home * home_weight + lambda2_away * away_weight + 
                            lambda2_home * home_weight + lambda1_away * away_weight) / 4
            
            prob_over_25 = sum(ProbabilityCalculator.calculate_poisson_probability(weighted_lambda * 2.5, k) 
                             for k in range(3, 15))
            return min(prob_over_25, 0.95), "–í–∑–≤–µ—à.–ü—É–∞—Å—Å–æ–Ω"

        def historical_totals():
            """–ú–µ—Ç–æ–¥ 3: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç–æ—Ç–∞–ª—ã"""
            enabled, min_matches = ENABLED_METHODS['historical_totals']
            if not enabled:
                return 0, "–ò—Å—Ç–æ—Ä–∏—á.—Ç–æ—Ç–∞–ª"
            if team1_data['matches_processed'] < min_matches or team2_data['matches_processed'] < min_matches:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –º–µ—Ç–æ–¥–∞ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç–æ—Ç–∞–ª—ã: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç—á–µ–π ({team1_data['matches_processed']}/{team2_data['matches_processed']} < {min_matches})")
                return 0, "–ò—Å—Ç–æ—Ä–∏—á.—Ç–æ—Ç–∞–ª"
                
            all_totals = [m['total_goals'] for m in team1_data['matches_details']] + \
                        [m['total_goals'] for m in team2_data['matches_details']]
            
            over_25_count = sum(1 for total in all_totals if total > 2.5)
            prob = over_25_count / len(all_totals) if all_totals else 0.5
            return prob, "–ò—Å—Ç–æ—Ä–∏—á.—Ç–æ—Ç–∞–ª"

        def recent_form():
            """–ú–µ—Ç–æ–¥ 4: –§–æ—Ä–º–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π"""
            enabled, min_matches = ENABLED_METHODS['recent_form']
            if not enabled:
                return 0, "–§–æ—Ä–º–∞"
            if team1_data['matches_processed'] < min_matches or team2_data['matches_processed'] < min_matches:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –º–µ—Ç–æ–¥–∞ –§–æ—Ä–º–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç—á–µ–π ({team1_data['matches_processed']}/{team2_data['matches_processed']} < {min_matches})")
                return 0, "–§–æ—Ä–º–∞"
                
            recent_matches = team1_data['matches_details'][-5:] + team2_data['matches_details'][-5:]
            over_25_count = sum(1 for m in recent_matches if m['total_goals'] > 2.5)
            prob = over_25_count / len(recent_matches) if recent_matches else 0.5
            return prob, "–§–æ—Ä–º–∞"

        def attacking_potential():
            """–ú–µ—Ç–æ–¥ 5: –ê—Ç–∞–∫—É—é—â–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"""
            enabled, min_matches = ENABLED_METHODS['attacking_potential']
            if not enabled:
                return 0, "–ê—Ç–∞–∫–∞"
            if team1_data['matches_processed'] < min_matches or team2_data['matches_processed'] < min_matches:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –º–µ—Ç–æ–¥–∞ –ê—Ç–∞–∫—É—é—â–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç—á–µ–π ({team1_data['matches_processed']}/{team2_data['matches_processed']} < {min_matches})")
                return 0, "–ê—Ç–∞–∫–∞"
                
            attack1 = team1_data['total_goals_scored'] / team1_data['matches_processed']
            attack2 = team2_data['total_goals_scored'] / team2_data['matches_processed']
            defense1 = team1_data['total_goals_conceded'] / team1_data['matches_processed']
            defense2 = team2_data['total_goals_conceded'] / team2_data['matches_processed']
            
            expected_goals = (attack1 + defense2 + attack2 + defense1) / 2
            prob = min(0.95, expected_goals / 3.5)
            return prob, "–ê—Ç–∞–∫–∞"

        def bayesian_method():
            """–ú–µ—Ç–æ–¥ 6: –ë–∞–π–µ—Å–æ–≤—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥"""
            enabled, min_matches = ENABLED_METHODS['bayesian']
            if not enabled:
                return 0, "–ë–∞–π–µ—Å–æ–≤—Å–∫–∏–π"
            if team1_data['matches_processed'] < min_matches or team2_data['matches_processed'] < min_matches:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –º–µ—Ç–æ–¥–∞ –ë–∞–π–µ—Å–æ–≤—Å–∫–∏–π: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç—á–µ–π ({team1_data['matches_processed']}/{team2_data['matches_processed']} < {min_matches})")
                return 0, "–ë–∞–π–µ—Å–æ–≤—Å–∫–∏–π"
                
            prior_alpha = 8
            prior_beta = 8
            
            total_goals = team1_data['total_goals_scored'] + team2_data['total_goals_scored']
            total_matches = team1_data['matches_processed'] + team2_data['matches_processed']
            
            posterior_alpha = prior_alpha + total_goals
            posterior_beta = prior_beta + total_matches
            
            expected_goals = posterior_alpha / posterior_beta
            prob = min(0.95, expected_goals / 3.0)
            return prob, "–ë–∞–π–µ—Å–æ–≤—Å–∫–∏–π"

        def ml_approach():
            """–ú–µ—Ç–æ–¥ 7: –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ)"""
            enabled, min_matches = ENABLED_METHODS['ml_approach']
            if not enabled:
                return 0, "ML –ø–æ–¥—Ö–æ–¥"
            if team1_data['matches_processed'] < min_matches or team2_data['matches_processed'] < min_matches:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –º–µ—Ç–æ–¥–∞ ML –ø–æ–¥—Ö–æ–¥: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç—á–µ–π ({team1_data['matches_processed']}/{team2_data['matches_processed']} < {min_matches})")
                return 0, "ML –ø–æ–¥—Ö–æ–¥"
                
            features = []
            features.append(team1_data['total_goals_scored'] / team1_data['matches_processed'])
            features.append(team2_data['total_goals_scored'] / team2_data['matches_processed'])
            features.append(team1_data['total_goals_conceded'] / team1_data['matches_processed'])
            features.append(team2_data['total_goals_conceded'] / team2_data['matches_processed'])
            
            tb1 = sum(1 for m in team1_data['matches_details'] if m['total_goals'] > 2.5) / team1_data['matches_processed']
            tb2 = sum(1 for m in team2_data['matches_details'] if m['total_goals'] > 2.5) / team2_data['matches_processed']
            features.extend([tb1, tb2])
            
            # –ü—Ä–æ—Å—Ç–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
            prob = min(0.95, sum(features) / len(features))
            return prob, "ML –ø–æ–¥—Ö–æ–¥"

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        methods = [
            poisson_method, weighted_poisson, historical_totals, recent_form,
            attacking_potential, bayesian_method, ml_approach
        ]
        
        results = []
        all_methods_sufficient = True
        
        for method in methods:
            try:
                prob, name = method()
                if prob > 0:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∞—Ç—á–µ–π
                    results.append((name, prob))
                else:
                    # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –≤–∫–ª—é—á–µ–Ω, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö - –æ—Ç–º–µ—á–∞–µ–º —ç—Ç–æ
                    enabled, min_matches = ENABLED_METHODS[method.__name__.replace('_method', '')]
                    if enabled:
                        all_methods_sufficient = False
                        logger.debug(f"–ú–µ—Ç–æ–¥ {name} –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ {method.__name__}: {str(e)}")
                continue
        
        # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∫–ª—é—á–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á
        if not all_methods_sufficient:
            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –º–∞—Ç—á–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Ç—è –±—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞")
            return []
        
        return results

# ==============================================
# –§–ò–õ–¨–¢–† –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•
# ==============================================
def is_data_quality_sufficient(team1_data, team2_data):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    –ú–∞—Ç—á –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Ç—è –±—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    for method_name, (enabled, min_matches) in ENABLED_METHODS.items():
        if enabled:
            # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –≤–∫–ª—é—á–µ–Ω, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–≥–æ - –º–∞—Ç—á –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
            if team1_data['matches_processed'] < min_matches or team2_data['matches_processed'] < min_matches:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –º–∞—Ç—á–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Ç–æ–¥–∞ {method_name} ({team1_data['matches_processed']}/{team2_data['matches_processed']} < {min_matches})")
                return False
    
    return True

def extract_team_data(detail, team_name):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    matches_details = []
    total_goals_scored = 0
    total_goals_conceded = 0
    home_matches = 0
    away_matches = 0
    
    for j in range(1, min(11, len(detail))):  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 6 –Ω–∞ 11 –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è 10 –º–∞—Ç—á–µ–π
        try:
            if len(detail[j]) < 5:
                continue
                
            if detail[j][4] == 'home':
                goals_scored = detail[j][2]
                goals_conceded = detail[j][3]
                match_type = "–¥–æ–º–∞"
                home_matches += 1
            elif detail[j][4] == 'away':
                goals_scored = detail[j][3]
                goals_conceded = detail[j][2]
                match_type = "–≤ –≥–æ—Å—Ç—è—Ö"
                away_matches += 1
            else:
                continue
                
            matches_details.append({
                'type': match_type,
                'goals_scored': goals_scored,
                'goals_conceded': goals_conceded,
                'total_goals': goals_scored + goals_conceded
            })
            
            total_goals_scored += goals_scored
            total_goals_conceded += goals_conceded
            
        except (IndexError, TypeError):
            continue
    
    if not matches_details:
        return None
    
    return {
        'matches_processed': len(matches_details),
        'matches_details': matches_details,
        'total_goals_scored': total_goals_scored,
        'total_goals_conceded': total_goals_conceded,
        'home_matches': home_matches,
        'away_matches': away_matches
    }

def create_methods_visualization(probability_results):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–µ—Ç–æ–¥–æ–≤ –≤ –≤–∏–¥–µ —ç–º–æ–¥–∑–∏"""
    visualization = []
    for name, prob in probability_results:
        prob_percent = prob * 100
        if prob_percent >= 80:
            visualization.append("üü¢")
        elif prob_percent >= 60:
            visualization.append("üü°")
        else:
            visualization.append("üî¥")
    return "".join(visualization)

# ==============================================
# –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê –ú–ê–¢–ß–ï–ô
# ==============================================
def analyze_matches():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç—á–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ"""
    global sent_matches
    
    try:
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ç—á–∏
        current_time = datetime.now()
        sent_matches = [match for match in sent_matches 
                       if (current_time - match['match_time']) <= timedelta(days=CLEANUP_DAYS)]
        
        list_live = []
        search_list = FlashscoreAPI.get_matches(0)  # –ú–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        
        if not search_list:
            logger.info("–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—É—Å—Ç")
            return []
        
        for match in search_list:
            match_id = match[0]
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—á–∞–ª–∏—Å—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
            current_time = datetime.now()
            if match[3] < current_time:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á {match_id} - —É–∂–µ –Ω–∞—á–∞–ª—Å—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞—Ç—á—É
            detail = FlashscoreAPI.get_total_goals(str(match_id))
            if not detail or len(detail) < 2 or len(detail[0]) < 7 or len(detail[1]) < 7:
                logger.debug(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –º–∞—Ç—á–∞ {match_id}")
                continue

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥
            team1_data = extract_team_data(detail[0], match[1])
            team2_data = extract_team_data(detail[1], match[2])
            
            if not team1_data or not team2_data:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–∞—Ç—á–∞ {match_id}")
                continue

            # –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–• - –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Ç—è –±—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á
            if not is_data_quality_sufficient(team1_data, team2_data):
                continue

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
            probability_results = ProbabilityCalculator.advanced_probability_analysis(team1_data, team2_data)
            
            # –ï—Å–ª–∏ probability_results –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - –∑–Ω–∞—á–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∫–æ–≥–æ-—Ç–æ –º–µ—Ç–æ–¥–∞
            if not probability_results:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –º–∞—Ç—á–∞ {match_id}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤")
                continue

            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            total_prob = sum(prob for _, prob in probability_results)
            avg_probability = total_prob / len(probability_results)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±—É–∫–º–µ–∫–µ—Ä–∞
            bookmaker_odds = FlashscoreAPI.get_odds(match_id)
            if bookmaker_odds is None:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –º–∞—Ç—á–∞ {match_id}")
                continue
                
            bookmaker_odds = float(bookmaker_odds)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—à –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            our_expected_odds = 1 / avg_probability if avg_probability > 0 else 999
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if (avg_probability >= MIN_AVG_PROBABILITY and 
                MIN_BOOKMAKER_ODDS <= bookmaker_odds <= MAX_BOOKMAKER_ODDS and
                MIN_OUR_ODDS <= our_expected_odds <= MAX_OUR_ODDS):
                
                date_str = match[3].strftime('%d.%m.%Y')
                time_str = match[3].strftime('%H:%M')
                match_key = f"{match[1]}_{match[2]}_{date_str}"
                
                if not any(m['key'] == match_key for m in sent_matches):
                    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –º–µ—Ç–æ–¥–æ–≤
                    method_visualization = create_methods_visualization(probability_results)
                    
                    match_data = {
                        'key': match_key,
                        'match_id': match_id,
                        'date_str': date_str,
                        'time_str': time_str,
                        'league': match[4],
                        'teams': f"{match[1]} - {match[2]}",
                        'odds': bookmaker_odds,
                        'avg_probability': round(avg_probability * 100, 1),
                        'our_expected_odds': round(our_expected_odds, 2),
                        'methods_visualization': method_visualization,
                        'match_time': match[3],
                        'result': None,
                        'bet_status': None,
                        'status': 'upcoming'
                    }
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –º–µ—Ç–æ–¥—É –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    method_name_mapping = {
                        '–ü—É–∞—Å—Å–æ–Ω': 'poisson',
                        '–í–∑–≤–µ—à.–ü—É–∞—Å—Å–æ–Ω': 'weighted_poisson', 
                        '–ê—Ç–∞–∫–∞': 'attacking_potential',
                        '–ë–∞–π–µ—Å–æ–≤—Å–∫–∏–π': 'bayesian',
                        '–ò—Å—Ç–æ—Ä–∏—á.—Ç–æ—Ç–∞–ª': 'historical_totals',
                        '–§–æ—Ä–º–∞': 'recent_form',
                        'ML –ø–æ–¥—Ö–æ–¥': 'ml_approach'
                    }
                    
                    for method_name, prob in probability_results:
                        db_method_name = method_name_mapping.get(method_name)
                        if db_method_name:
                            match_data[f'{db_method_name}_prob'] = prob
                        else:
                            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è –º–µ—Ç–æ–¥–∞: {method_name}")
                    
                    list_live.append(match_data)
        
        return list_live
    
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ analyze_matches: {str(e)}", exc_info=True)
        return []

def check_match_results():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏"""
    global sent_matches, message_ids
    
    try:
        for match in sent_matches[:]:
            try:
                score, status, home_score, away_score = FlashscoreAPI.get_match_result(match['match_id'])
                
                if status == 'finished' and match['status'] != 'finished':
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–≤–∫–∏
                    if home_score is not None and away_score is not None:
                        total_goals = home_score + away_score
                        bet_status = "‚úÖ –°—Ç–∞–≤–∫–∞ –∑–∞—à–ª–∞!" if total_goals >= 3 else "‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –∑–∞—à–ª–∞!"
                        bet_result_db = "–ó–∞—à–ª–∞" if total_goals >= 3 else "–ù–µ –∑–∞—à–ª–∞"
                    else:
                        bet_status = "‚öñÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                        bet_result_db = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
                    match['status'] = 'finished'
                    match['result'] = score
                    match['bet_status'] = bet_status
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    update_match_card(match)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –º–∞—Ç—á –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    if STAT_DB and score:
                        StatisticsDB.add_completed_match_to_db(match)
                    
                    logger.info(f"–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω: {match['teams']} {score} - {bet_status}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∞—Ç—á–∞ {match['match_id']}: {str(e)}", exc_info=True)
    
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_match_results: {str(e)}", exc_info=True)

# ==============================================
# –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° TELEGRAM
# ==============================================
def update_match_card(match):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –º–∞—Ç—á–∞ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    global message_ids
    
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        odds_formatted = f"{match['odds']:.2f}"
        our_odds_formatted = f"{match['our_expected_odds']:.2f}"
        
        if match['status'] == 'upcoming':
            # –ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–≥–æ –º–∞—Ç—á–∞
            message_text = (
                f"üü¢ –í–Ω–∏–º–∞–Ω–∏–µ! –ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑!\n\n"
                f"üèÜ {match['league']}\n\n"
                f"‚öîÔ∏è {match['teams']}\n\n"
                f"-----------------------------------------------\n"
                f"üìÖ {match['date_str']} {match['time_str']}\n"
                f"-----------------------------------------------\n"
                f"{match['methods_visualization']}\n"
                f"-----------------------------------------------\n"
                f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:  {match['avg_probability']} %\n"
                f"-----------------------------------------------\n"
                f"üìä –ù–∞—à –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:  {our_odds_formatted}\n"
                f"-----------------------------------------------\n\n"
                f"üî• –ü—Ä–æ–≥–Ω–æ–∑: –¢–ë 2.5 –∑–∞ {odds_formatted}"
            )
        elif match['status'] == 'finished':
            # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
            message_text = (
                f"‚ö™Ô∏è –ú–∞—Ç—á –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!\n\n"
                f"üèÜ {match['league']}\n\n"
                f"‚öîÔ∏è {match['teams']}\n\n"
                f"-----------------------------------------------\n"
                f"üìÖ {match['date_str']} {match['time_str']}\n"
                f"-----------------------------------------------\n"
                f"{match['methods_visualization']}\n"
                f"-----------------------------------------------\n"
                f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:  {match['avg_probability']} %\n"
                f"-----------------------------------------------\n"
                f"üìä –ù–∞—à –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:  {our_odds_formatted}\n"
                f"-----------------------------------------------\n\n"
                f"üî• –ü—Ä–æ–≥–Ω–æ–∑: –¢–ë 2.5 –∑–∞ {odds_formatted}\n"
                f"{match['bet_status']} –°—á–µ—Ç {match['result']}"
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if match['key'] in message_ids:
            for chat_id, msg_id in message_ids[match['key']].items():
                try:
                    rate_limiter.wait_if_needed()
                    bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=msg_id,
                        text=message_text
                    )
                except telebot.apihelper.ApiTelegramException as e:
                    if "message to edit not found" in str(e).lower() or "chat not found" in str(e).lower():
                        logger.info(f"–ß–∞—Ç {chat_id} –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞")
                        active_chats.pop(chat_id, None)
                        message_ids[match['key']].pop(chat_id, None)
                    elif "too many requests" in str(e).lower():
                        retry_after = int(str(e).split('retry after ')[-1])
                        logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç Telegram API. –û–∂–∏–¥–∞–Ω–∏–µ {retry_after} —Å–µ–∫—É–Ω–¥")
                        time.sleep(retry_after)
                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                        try:
                            bot.edit_message_text(
                                chat_id=chat_id,
                                message_id=msg_id,
                                text=message_text
                            )
                        except:
                            pass
                    else:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {str(e)}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {str(e)}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞—Ç—á–∞: {str(e)}", exc_info=True)

def broadcast_message(message_text, match_key=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    global message_ids
    
    try:
        if match_key:
            # –î–ª—è –º–∞—Ç—á–µ–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if match_key not in message_ids:
                message_ids[match_key] = {}
                
            for chat_id in list(active_chats.keys()):
                try:
                    rate_limiter.wait_if_needed()
                    sent_msg = bot.send_message(chat_id, message_text)
                    message_ids[match_key][chat_id] = sent_msg.message_id
                    active_chats[chat_id] = datetime.now()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                except telebot.apihelper.ApiTelegramException as e:
                    if "chat not found" in str(e).lower():
                        logger.info(f"–ß–∞—Ç {chat_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
                        active_chats.pop(chat_id, None)
                        if match_key in message_ids and chat_id in message_ids[match_key]:
                            message_ids[match_key].pop(chat_id, None)
                    elif "too many requests" in str(e).lower():
                        retry_after = int(str(e).split('retry after ')[-1])
                        logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç Telegram API. –û–∂–∏–¥–∞–Ω–∏–µ {retry_after} —Å–µ–∫—É–Ω–¥")
                        time.sleep(retry_after)
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {str(e)}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {str(e)}")
        else:
            # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å—ã–ª–∞–µ–º
            for chat_id in list(active_chats.keys()):
                try:
                    rate_limiter.wait_if_needed()
                    bot.send_message(chat_id, message_text)
                    active_chats[chat_id] = datetime.now()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                except telebot.apihelper.ApiTelegramException as e:
                    if "chat not found" in str(e).lower():
                        logger.info(f"–ß–∞—Ç {chat_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
                        active_chats.pop(chat_id, None)
                    elif "too many requests" in str(e).lower():
                        retry_after = int(str(e).split('retry after ')[-1])
                        logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç Telegram API. –û–∂–∏–¥–∞–Ω–∏–µ {retry_after} —Å–µ–∫—É–Ω–¥")
                        time.sleep(retry_after)
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {str(e)}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {str(e)}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}", exc_info=True)

# ==============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î TELEGRAM
# ==============================================
bot = telebot.TeleBot(TEL_TOKEN)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    global admin_chat_id
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
        active_chats[message.chat.id] = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if message.chat.id == admin_chat_id:
            bot.send_message(message.chat.id, "üëë –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞! –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω: {message.chat.id}")
        else:
            bot.send_message(message.chat.id, "ü§ñ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –±–æ—Ç—É! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã!")
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω: {message.chat.id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if len(active_chats) == 1:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if STAT_DB:
                StatisticsDB.initialize_database()
            
            Thread(target=analyze_loop, daemon=True).start()
            Thread(target=results_check_loop, daemon=True).start()
            logger.info("–ó–∞–ø—É—â–µ–Ω—ã —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–µ–π")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {str(e)}", exc_info=True)

@bot.message_handler(commands=['info'])
def send_info(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info"""
    try:
        bot.send_message(message.chat.id, "üü¢ –°—Ç–∞—Ç—É—Å: –ë–æ—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ú–∞—Ç—á–∏!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /info: {str(e)}", exc_info=True)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global admin_chat_id
    
    try:
        # –°–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ä–∞—Å—Å—ã–ª–∞—é—Ç—Å—è –≤—Å–µ–º
        if message.chat.id == admin_chat_id:
            broadcast_message(message.text)
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º: {message.text}")
        else:
            bot.reply_to(message, "‚úâÔ∏è –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º.")
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}: {message.text}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)

# ==============================================
# –§–£–ù–ö–¶–ò–ò –¶–ò–ö–õ–û–í –ê–ù–ê–õ–ò–ó–ê
# ==============================================
def analyze_loop():
    """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–µ–π"""
    logger.info("–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–µ–π...")
    
    while True:
        try:
            if active_chats:  # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                matches = analyze_matches()
                
                for match in matches:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –º–∞—Ç—á —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                    if not any(m['key'] == match['key'] for m in sent_matches):
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                        odds_formatted = f"{match['odds']:.2f}"
                        our_odds_formatted = f"{match['our_expected_odds']:.2f}"
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á–∞
                        message_text = (
                            f"üü¢ –í–Ω–∏–º–∞–Ω–∏–µ! –ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑!\n\n"
                            f"üèÜ {match['league']}\n\n"
                            f"‚öîÔ∏è {match['teams']}\n\n"
                            f"-----------------------------------------------\n"
                            f"üìÖ {match['date_str']} {match['time_str']}\n"
                            f"-----------------------------------------------\n"
                            f"{match['methods_visualization']}\n"
                            f"-----------------------------------------------\n"
                            f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:  {match['avg_probability']} %\n"
                            f"-----------------------------------------------\n"
                            f"üìä –ù–∞—à –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:  {our_odds_formatted}\n"
                            f"-----------------------------------------------\n\n"
                            f"üî• –ü—Ä–æ–≥–Ω–æ–∑: –¢–ë 2.5 –∑–∞ {odds_formatted}"
                        )
                        
                        # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        broadcast_message(message_text, match['key'])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç—á –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
                        sent_matches.append(match)
                        
                        logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ç—á: {match['teams']} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {match['avg_probability']}%)")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
            time.sleep(300)
            logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–µ–π ...")
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ analyze_loop: {str(e)}", exc_info=True)
            time.sleep(API_RETRY_DELAY)

def results_check_loop():
    """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π"""
    logger.info("–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    
    while True:
        try:
            if active_chats:  # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                check_match_results()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            time.sleep(300)
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ results_check_loop: {str(e)}", exc_info=True)
            time.sleep(API_RETRY_DELAY)

# ==============================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ==============================================
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ID_ADMIN}")
    logger.info(f"–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {'–í–ö–õ–Æ–ß–ï–ù' if STAT_DB else '–í–´–ö–õ–Æ–ß–ï–ù'}")
    logger.info(f"–î–∏–∞–ø–∞–∑–æ–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ë–ö: {MIN_BOOKMAKER_ODDS} - {MAX_BOOKMAKER_ODDS}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if STAT_DB:
            StatisticsDB.initialize_database()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        bot_thread = Thread(target=bot.infinity_polling, kwargs={'timeout': POLLING_TIMEOUT}, daemon=True)
        bot_thread.start()
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}", exc_info=True)